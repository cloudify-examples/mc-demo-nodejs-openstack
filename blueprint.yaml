tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://cloudify.co/spec/cloudify/5.0.0/types.yaml
  - plugin:cloudify-openstack-plugin
  - plugin:demo-plugin

inputs:
  openstack_config:
    description: >
      Parameters for connecting to OpenStack.
    type: cloudify.openstack.types.configuration
    default:
      username: { get_secret: openstack_username }
      password: { get_secret: openstack_password }
      tenant_name: { get_secret: openstack_tenant_name }
      auth_url: { get_secret: openstack_auth_url }
      region: { get_secret: openstack_region }

  external_network_name:
    description: >
      Name of external network, from which to obtain a floating IP.
      It is assumed that the external network already exists, as external
      networks are typically created by OpenStack administrators rather than
      application deployers.
    type: string
    default: { get_secret: external_network_name }

  agent_security_group_name:
    description: >
      Name of security group to which all agent VM's belong. It is assumed
      that the agents' security group already exists, as it is reusable across
      multiple deployments and should be created by administrators.
    type: string
    default: { get_secret: default_agents_security_group }

  keypair_name:
    description: >
      Name of keypair to attach to the created VM.
    type: string
    default: { get_secret: openstack_default_keypair_name }

  resource_name_prefix:
    description: >
      Prefix to prepend to created resources' names.
    type: string

  image_id:
    description: >
      Name of image to boot from.
    type: string
    default: { get_secret: default_linux_image_id }

  flavor_id:
    description: >
      Name of flavour to use for the created VM.
    type: string
    default: { get_secret: default_linux_flavour_id }

  router_name:
    description: >
      Name of router to connect the new subnet to.
      The router is expected to already exist, as routers are typically
      created by OpenStack administrators.
    type: string
    default: { get_secret: default_router_name }

  network_name:
    description: >
      Name of network that the new VM should connect to.
    type: string
    default: { get_secret: default_management_network_name }

  subnet_name:
    description: >
      Name of subnet to connect to.
    type: string
    default: { get_secret: default_subnet_name }

  content_dir:
    description: >
      Directory to serve contents from.
    type: string
    default: /var/wwwroot

  ftp_username:
    description: >
      Name of user to create for FTP access.
    type: string
    default: test

  min_ftp_port:
    description: >
      Lowest port number to use for FTP PASV mode.
    type: integer
    default: 10000

  max_ftp_port:
    description: >
      Highest  port number to use for FTP PASV mode.
    type: integer
    default: 10100

  agent_user:
    type: string
    default: { get_secret: default_linux_agent_user }

  private_key_path:
    type: string
    default: { get_secret: default_private_key_path }

node_templates:
  app_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { concat: [ { get_input: resource_name_prefix }, '_sg' ] }
      rules:
        - direction: ingress
          protocol: tcp
          port_range_min: 80
          port_range_max: 80
        - direction: ingress
          protocol: tcp
          port_range_min: 20
          port_range_max: 21
        - direction: ingress
          protocol: tcp
          port_range_min: { get_input: min_ftp_port }
          port_range_max: { get_input: max_ftp_port }

  agent_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: agent_security_group_name }
      use_external_resource: true

  floating_ip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: { get_input: openstack_config }
      floatingip:
        floating_network_name: { get_input: external_network_name }

  router:
    type: cloudify.openstack.nodes.Router
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: router_name }
      use_external_resource: true

  network:
    type: cloudify.openstack.nodes.Network
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: network_name }
      use_external_resource: true

  subnet:
    type: cloudify.openstack.nodes.Subnet
    properties:
      openstack_config: { get_input: openstack_config }
      resource_id: { get_input: subnet_name }
      use_external_resource: true

  port:
    type: cloudify.openstack.nodes.Port
    properties:
      openstack_config: { get_input: openstack_config }
    relationships:
      - type: cloudify.relationships.contained_in
        target: network
      - type: cloudify.relationships.connected_to
        target: subnet
      - type: cloudify.openstack.port_connected_to_security_group
        target: agent_security_group
      - type: cloudify.openstack.port_connected_to_security_group
        target: app_security_group
      - type: cloudify.openstack.port_connected_to_floating_ip
        target: floating_ip

  vm:
    type: cloudify.openstack.nodes.Server
    properties:
      openstack_config: { get_input: openstack_config }
      agent_config:
        user: { get_input: agent_user }
        key: { get_input: private_key_path }
      image: { get_input: image_id }
      flavor: { get_input: flavor_id }
      server:
        key_name: { get_input: keypair_name }
    relationships:
      - type: cloudify.openstack.server_connected_to_port
        target: port

  vm_init:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/init.sh
          inputs:
            ftp_username: { get_input: ftp_username }
            content_dir: { get_input: content_dir }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vm

  ftp_server:
    type: vsftpd
    properties:
      configuration:
        anonymous_enable: NO
        local_enable: YES
        write_enable: YES
        local_umask: 022
        connect_from_port_20: YES
        ascii_upload_enable: YES
        ascii_download_enable: YES
        ftpd_banner: Welcome
        listen: NO
        listen_ipv6: YES
        pam_service_name: vsftpd
        userlist_enable: YES
        tcp_wrappers: YES
        use_localtime: YES
        pasv_enable: Yes
        pasv_min_port: { get_input: min_ftp_port }
        pasv_max_port: { get_input: max_ftp_port }
        local_root: { get_property: [ http_server, content_dir ] }
        pasv_promiscuous: YES
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: vm_init
        type: cloudify.relationships.depends_on

  nodejs:
    type: nodejs
    properties:
      npm_list:
        - http-server
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: vm_init
        type: cloudify.relationships.depends_on

  http_server:
    type: nodejs.http_server
    properties:
      content_dir: /var/wwwroot
    relationships:
      - target: vm
        type: cloudify.relationships.contained_in
      - target: nodejs
        type: cloudify.relationships.depends_on

capabilities:
  username:
    value: { get_input: ftp_username }
  password:
    value: { get_attribute: [ vm_init, ftp_password ] }
  endpoint:
    value: { concat: [ 'ftp://', { get_attribute: [floating_ip, floating_ip_address] } ] }
  base_url:
    value: { concat: [ 'http://', { get_attribute: [floating_ip, floating_ip_address] }, ':', { get_property: [ http_server, port ] } ] }
